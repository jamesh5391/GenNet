import pandas as pd
import numpy as np
import argparse

def format_for_gennet(fam_file: str, pheno_file: str, output_csv: str):
    """
    Combines PLINK .fam and .pheno files into the GenNet subject.csv format.

    This script is a custom helper for preparing simulated data for the GenNet tool.

    Args:
        fam_file (str): Path to the .fam file from your original genotype data.
        pheno_file (str): Path to the .pheno file generated by PLINK simulation.
        output_csv (str): Path to the output subject.csv file.
    """
    print("Reading PLINK .fam and .pheno files...")
    # Read the first two columns (Family ID, Individual ID) from the .fam file
    fam_df = pd.read_csv(fam_file, sep='\s+', header=None, usecols=[0, 1], names=['patient_id', 'IID'])
    # Read the third column (phenotype) from the .pheno file
    pheno_df = pd.read_csv(pheno_file, sep='\s+', header=None, usecols=[2], names=['labels'])

    # Combine the dataframes side-by-side
    subject_df = pd.concat([fam_df, pheno_df], axis=1)
    
    # Add the 'genotype_row' column, which is just the 0-based index
    subject_df['genotype_row'] = np.arange(len(subject_df))
    
    # Create a 60/20/20 train/validation/test split
    # 1 = train, 2 = validation, 3 = test
    split_assignments = np.random.choice([1, 2, 3], size=len(subject_df), p=[0.6, 0.2, 0.2])
    subject_df['set'] = split_assignments
    
    # Reorder columns to match the required GenNet format and drop the extra IID column
    final_df = subject_df[['patient_id', 'labels', 'genotype_row', 'set']]
    
    # Save to the final subject.csv file
    final_df.to_csv(output_csv, index=False)
    print(f"Successfully created GenNet-compatible subject file: {output_csv}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Format simulation output for GenNet.")
    parser.add_argument("--fam", required=True, help="Path to the original .fam file.")
    parser.add_argument("--pheno", required=True, help="Path to the simulated .pheno file.")
    parser.add_argument("--out", default="subject.csv", help="Output CSV file name.")
    args = parser.parse_args()

    format_for_gennet(args.fam, args.pheno, args.out)
